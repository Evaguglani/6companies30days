
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        vector<vector<string>> ans;
        map<string,vector<int>>m1;
        int n=string_list.size();
        for(int i=0;i<n;i++)
        {
            string k=string_list[i];
            sort(k.begin(),k.end());
            if(m1.find(k)!=m1.end())
            {
                m1[k].push_back(i);
            }
            else
            {
                vector<int> v;
                v.push_back(i);
                m1.insert({k,v});
            }
        }
        for(auto it=m1.begin();it!=m1.end();it++)
        {
            vector<string> k;
            auto vec=it->second;
            for(auto x:vec)
            {
                string s;
                s=string_list[x];
                k.push_back(s);
                
            }
            ans.push_back(k);
            
        }
        return ans;
    }
};



int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<string> string_list(n);
        for (int i = 0; i < n; ++i)
            cin>>string_list[i]; 
        Solution ob;
        vector<vector<string> > result = ob.Anagrams(string_list);
        sort(result.begin(),result.end());
        for (int i = 0; i < result.size(); i++)
        {
            for(int j=0; j < result[i].size(); j++)
            {
                cout<<result[i][j]<<" ";
            }
            cout<<"\n";
        }
    }

    return 0;
}
